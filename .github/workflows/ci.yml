name: Django CI

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH  # Добавление Poetry в PATH
      - name: Install dependencies
        run: poetry install --no-root  # Установка только необходимых зависимостей
      - name: Run Flake8
        run: poetry run flake8 .  # Запуск Flake8 через Poetry

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache Poetry dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH  # Добавление Poetry в PATH

      - name: Install dependencies
        run: poetry install --no-root  # Установка только необходимых зависимостей

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: poetry run python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/lms_drf_lms_drf_1:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/lms_drf_lms_drf_1:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/lms_drf_lms_drf_1:${{ github.sha }}
            sudo docker stop lms_drf_lms_drf_1 || true
            sudo docker rm lms_drf_lms_drf_1 || true
            sudo docker run -d --name lms_drf_lms_drf_1 -p 8000:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/lms_drf_lms_drf_1:${{ github.sha }}
          EOF